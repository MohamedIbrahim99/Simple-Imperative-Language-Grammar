
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}


PARSER_BEGIN(Example1)
package egtry;

/**
 * Simple brace matcher.
 */
public class Example1 {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Example1 parser = new Example1(System.in);
    parser.Input();
  }

}

PARSER_END(Example1)


  SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/** Root production. */
boolean Input() :
{}
{//LOOKAHEAD((com()";")* com())
com()< EOF >
  {System.out.println("Successfully");}
  {
    return true;
  }
}
void Digit():
{}
{ <INT: (["0"-"9"]) > }
void Letter():
{}
{"a"|"b"|"c"|"d"|"e"|"f"}
void Num():
{}
{Digit() [Num()]}
void Var():
{}
{Letter() [Var()]}
void AEXP():
{}
{Num()|Var()|"("AEXP()("+"|"-")AEXP()")"}
void BEXP():
{}
{LOOKAHEAD("("(AEXP())) 
 "("(AEXP()("==")AEXP())")"|("("(BEXP()"^"BEXP())")"| "tt"|"ff"|"!"BEXP())}
void skip():   
{ }
{"skip"}
void com(): {}
{termcom()[";"com()]
}
void termcom():
{}
{Var()":="AEXP()|"if" BEXP() "then" com() "else" com()|"while" BEXP() "do" com()|skip()}